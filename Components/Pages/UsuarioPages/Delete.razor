@page "/usuarios/delete"
@inject AmigoPeludo.Data.AmigoPeludoContext DB
@using AmigoPeludo.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Deletar Usuario</PageTitle>

<h1>Deletar Usuario</h1>

<h3>Tem certeza que desela deletar sua conta?</h3>
<div>
    <h4>Usuario</h4>
    <hr />
    @if (usuario is null)
    {
        <p><em>Usuario não encontrado...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">nome</dt>
            <dd class="col-sm-10">@usuario.nome</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">dataNascimento</dt>
            <dd class="col-sm-10">@usuario.dataNascimento</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">senha</dt>
            <dd class="col-sm-10">@usuario.senha</dd>
        </dl>
        <EditForm method="post" Model="usuario" OnValidSubmit="DeleteUsuario" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(usuario is null)">Delete</button> |
            <a href="/paginaInicial">Voltar para pagina inicial</a>
        </EditForm>
    }
</div>

@code {
    Usuario? usuario;

    [SupplyParameterFromQuery]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        usuario = await DB.Usuario.FirstOrDefaultAsync(m => m.id == id);

        if (usuario is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteUsuario()
    {
        DB.Usuario.Remove(usuario!);
        foreach(Pet pet in DB.Pet)
        {
            if (pet.idUsuario == usuario.id)
            {
                DB.Pet.Remove(pet);
            }
        }
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/");
    }
}
