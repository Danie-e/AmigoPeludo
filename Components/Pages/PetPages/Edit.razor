@page "/Pets/edit"
@inject AmigoPeludo.Data.AmigoPeludoContext DB
@using AmigoPeludo.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Pet</h4>
<hr />
@if (Pet is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Pet" OnValidSubmit="UpdatePet" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Pet.id" value="@Pet.id" />
                <div class="mb-3">
                    <label for="nome" class="form-label">nome:</label>
                    <InputText id="nome" @bind-Value="Pet.nome" class="form-control" />
                    <ValidationMessage For="() => Pet.nome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="foto" class="form-label">foto:</label>
                    <InputText id="foto" @bind-Value="Pet.foto" class="form-control" />
                    <ValidationMessage For="() => Pet.foto" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datanascimento" class="form-label">dataNascimento:</label>
                    <InputDate id="datanascimento" @bind-Value="Pet.dataNascimento" class="form-control" />
                    <ValidationMessage For="() => Pet.dataNascimento" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="especie" class="form-label">especie:</label>
                    <InputText id="especie" @bind-Value="Pet.especie" class="form-control" />
                    <ValidationMessage For="() => Pet.especie" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="raca" class="form-label">raca:</label>
                    <InputText id="raca" @bind-Value="Pet.raca" class="form-control" />
                    <ValidationMessage For="() => Pet.raca" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cor" class="form-label">cor:</label>
                    <InputText id="cor" @bind-Value="Pet.cor" class="form-control" />
                    <ValidationMessage For="() => Pet.cor" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="sexo" class="form-label">sexo:</label>
                    <InputText id="sexo" @bind-Value="Pet.sexo" class="form-control" />
                    <ValidationMessage For="() => Pet.sexo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="historia" class="form-label">historia:</label>
                    <InputText id="historia" @bind-Value="Pet.historia" class="form-control" />
                    <ValidationMessage For="() => Pet.historia" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idusuario" class="form-label">idUsuario:</label>
                    <InputNumber id="idusuario" @bind-Value="Pet.idUsuario" class="form-control" />
                    <ValidationMessage For="() => Pet.idUsuario" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="adocao" class="form-label">adocao:</label>
                    <InputCheckbox id="adocao" @bind-Value="Pet.adocao" class="form-check-input" />
                    <ValidationMessage For="() => Pet.adocao" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/pets">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int id { get; set; }

    [SupplyParameterFromForm]
    public Pet? Pet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Pet ??= await DB.Pet.FirstOrDefaultAsync(m => m.id == id);

        if (Pet is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdatePet()
    {
        DB.Attach(Pet!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PetExists(Pet!.id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/pets");
    }

    bool PetExists(int id)
    {
        return DB.Pet.Any(e => e.id == id);
    }
}
